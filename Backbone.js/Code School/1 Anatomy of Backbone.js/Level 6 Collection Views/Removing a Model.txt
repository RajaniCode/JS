Removing a Model


Turns out one of the appointments in our collection was rescheduled for next week, but when Dr. Goodparts removed the appointment model from the collection, it wasn't removed from the DOM. You can imagine Dr. Goodparts reaction.

Fix this bug by using a custom event hide on Appointment models.

Update your AppointmentList collection to trigger the hide event on a model when it is removed.

Update your AppointmentView to call the remove function whenever its model fires the hide event.

MODELS

var Appointment = Backbone.Model.extend({});

APPOINTMENT_LIST.JS

var AppointmentList = Backbone.Collection.extend({
  model: Appointment,
  initialize: function(){
    
  }
});

APPOINTMENT_VIEW.JS

var AppointmentView = Backbone.View.extend({
  initialize: function(){

  },
  remove: function(){
    this.$el.remove();
  }
});

Answer:

APPOINTMENT_LIST.JS

var AppointmentList = Backbone.Collection.extend({
  model: Appointment,
  initialize: function(){
    this.on('remove', this.hideModel);
  },
  hideModel: function(model){
    model.trigger('hide');
  }
});

APPOINTMENT_VIEW.JS

var AppointmentView = Backbone.View.extend({
  initialize: function(){
	this.model.on('hide', this.remove, this);
  },
  remove: function(){
    this.$el.remove();
  }
});