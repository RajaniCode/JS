# WebAssembly (Wasm) 

# emsdk

[
% cd $HOME
]

% git clone https://github.com/emscripten-core/emsdk.git

% cd emsdk

% ./emsdk install latest

% ./emsdk activate latest

% source ./emsdk_env.sh

% emcc --version

# C

% mkdir -p C

% cd C

% nano index.c  
[
#include <stdio.h>

int main() {
  printf("%s\n", __VERSION__);
  printf("%s\n", __DATE__);
  printf("%s\n", __TIME__);
  return 0;
}
]
% cat index.c  

[
% gcc --version

% gcc index.c -o index

% ./index
]

# Emscripten JavaScript
% emcc index.c -o index.js

% node --version

# Emscripten Node.js
% node index.js

# Emscripten HTML
# Emscripten optimize code for size
% emcc index.c -O3 -o index.html

# HTTP server
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000




# C # emcc

% brew install emscripten

% emcc --version

[
% cd $HOME
]

% mkdir -p C

% cd C

% nano index.c  
[
#include <stdio.h>

int main() {
  printf("%s\n", __VERSION__);
  printf("%s\n", __DATE__);
  printf("%s\n", __TIME__);
  return 0;
}
]
% cat index.c  

[
% gcc --version

% gcc index.c -o index

% ./index
]

# Emscripten JavaScript
% emcc index.c -o index.js

% node --version

# Emscripten Node.js
% node index.js

# Emscripten HTML
# Emscripten optimize the code for size
% emcc index.c -O3 -o index.html

# HTTP server
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000




# TypeScript # npm # asc

[
% cd $HOME
]

% mkdir -p TypeScript

% cd TypeScript

% nano index.ts
[
export function math(x: i32, y: i32): i32 {
  return x * y;
}
]
% cat index.ts

# AssemblyScript Compiler for WebAssembly (wasm)
[
% npm install -g assemblyscript
]
% asc --version

# index.ts to wasm
% asc index.ts -o index.wasm

% nano index.js
[
export const wasm = async (source, importObject) => {
  let response = undefined;

  if (!importObject) {
    importObject = { imported_func: { arg: () => console.log(arg) },
    };
  }

  if (WebAssembly.instantiateStreaming) {
    response = await WebAssembly.instantiateStreaming(
      fetch(source),
      importObject
    );
  } else {
    const fetchThenInstantiate = async () => {
      const buffer = await fetch(source).then(response =>
        response.arrayBuffer()
      );
      return WebAssembly.instantiate(buffer, importObject);
    };
    response = await fetchThenInstantiate();
  }

  return response;
};

const wasmFunc = async () => {
  const module = await wasm("./index.wasm");

  const x = 5;
  const y = 7;
  const result = module.instance.exports.math(5, 7);

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
};

wasmFunc();
]
% cat index.js

% nano index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>TypeScript WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]
% cat index.html

[
% wget https://www.google.com/favicon.ico
]

# HTTP server
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000




# Go # tinygo

[
% cd $HOME
]

% mkdir -p Go

% cd Go

% nano index.go
[
package main

import "fmt"
import "runtime"

// % go run ./index.go % tinygo run ./index.go
func main() {
  fmt.Println("Runtime Version: " + runtime.Version());
  var x int = 555;
  var y int = 777;
  var result int = x * y;  
  fmt.Printf("Math: %d x %d = %d\n", x, y, result);
}

// Comment "export math" to make the func callable from JavaScript
//export math
func math(x int, y int) int {
  return x * y;
}
]
% cat index.go

# index.go to wasm
[
% go version
% tinygo version
% go run ./index.go
% tinygo run ./index.go
]
% tinygo build -o index.wasm -target wasm ./index.go

# wasm_exec.js from TinyGo root
% ls
% ls $(tinygo env TINYGOROOT)/targets/wasm_exec.js
% cp $(tinygo env TINYGOROOT)/targets/wasm_exec.js .
% ls

# NB
# wasm_exec.js must match tinygo version

% nano index.js
[
export const wasm = async (source, importObject) => {
  let response = undefined;

  if (WebAssembly.instantiateStreaming) {
    response = await WebAssembly.instantiateStreaming(
      fetch(source),
      importObject
    );
  } else {
    const fetchThenInstantiate = async () => {
      const buffer = await fetch(source).then(response =>
        response.arrayBuffer()
      );
      return WebAssembly.instantiate(buffer, importObject);
    };

    response = await fetchThenInstantiate();
  }

  return response;
};

const wasmFunc = async () => {
  const go = new Go();
  const importObject = go.importObject;

  const module = await wasm("./index.wasm", importObject);

  go.run(module.instance);

  const x = 5;
  const y = 7;
  const result = module.instance.exports.math(5, 7);

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
};

wasmFunc();
]
% cat index.js

% nano index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Go WebAssembly</title>
  </head>
  <body>
    <script src="./wasm_exec.js"></script>
    <script type="module" src="./index.js"></script>
  </body>
</html>
]
% cat index.html

# HTTP server
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000




# Rust # cargo # wasm-pack

[
% cd $HOME
]

% mkdir -p Rust

% cd Rust

[
% curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
]
% cargo --version

% cargo init

# The name `Rust` is not snake_case or kebab-case which is recommended for package names, consider `rust`
% nano Cargo.toml
[
[package]
name = "rust"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
wasm-bindgen = "0.2"
]

% cat Cargo.toml

# find library `Rust`, rename file to `src/lib.rs` or specify lib.path
% ls src
% cat src/main.rs 
% mv src/main.rs src/lib.rs
% ls src
% cat src/lib.rs

% nano src/lib.rs
[
use wasm_bindgen::prelude::*;

// Comment #[wasm_bindgen] to export the function, callable from JavaScript
#[wasm_bindgen]
pub fn math(x: i32, y: i32) -> i32 {
  return x * y;
}
]
% cat src/lib.rs

[
% cargo install wasm-pack
]
% wasm-pack --version

# Rust crate wasm-pack wasm
% wasm-pack build --target web

% nano index.js
[
import init from "./pkg/rust.js";

const wasmFunc = async () => {
  const module = await init("./pkg/rust_bg.wasm");

  const x = 5;
  const y = 7;
  const result = module.math(5, 7);

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
};

wasmFunc();
]
% cat index.js

% nano index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Rust WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]
% cat index.html

# HTTP server
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000




# CS # dotnet

[
% cd $HOME
]

% dotnet --version

% mkdir -p CS

% cd CS

% dotnet new console --name Wasm

% cd Wasm

[
% dotnet new sln -n Wasm

% dotnet sln Wasm.sln add Wasm.csproj
]

% dotnet run

% nano Wasm.csproj
[
<Project Sdk="Microsoft.NET.Sdk.WebAssembly">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
</Project>
]

% cat Wasm.csproj

% nano Program.cs
[
using System;
using System.Threading.Tasks;

internal class Program
{
    private static async Task Main()
    {
        int result = await Interop.Run(555, 777);
	Console.WriteLine($"CS Task Main() await = {result}");
    }
}
]
% cat Program.cs

% nano Interop.cs
[
using System;
using System.Runtime.InteropServices.JavaScript;
using System.Threading.Tasks;

public partial class Interop
{
    [JSImport("math", "Shim")]
    [return: JSMarshalAs<JSType.Number>]
    public static partial int Math([JSMarshalAs<JSType.Number>] int x, [JSMarshalAs<JSType.Number>] int y);

   [JSExport]
    public static async Task<int> Run(int x, int y)
    {
        await JSHost.ImportAsync("Shim", "/Shim.js");

	int result = Interop.Math(x, y);

	Console.WriteLine($"Math from CS loaded JS module: {x} * {y} = {result}");

	return result;
    }
}
]

% cat Interop.cs

% mkdir -p wwwroot

% ls wwwroot

% nano wwwroot/index.js
[
import { dotnet } from './_framework/dotnet.js'

const { setModuleImports, getAssemblyExports, getConfig, runMain } = await dotnet
    .withApplicationArguments("start")
    .create();

const config = getConfig();
const exports = await getAssemblyExports(config.mainAssemblyName);

try  {
  const x = 5;
  const y = 7;
  const result = JSON.stringify(await exports.Interop.Run(x, y));

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
} catch(error) {
  console.error(error);
}

await dotnet.run();
]

% cat wwwroot/index.js

% nano wwwroot/Shim.js
[
export function math(x, y) {
  console.log(`Math from JavaScript: ${x} * ${y} = ${x + y}`);
  return (x * y);
}
]
% cat wwwroot/Shim.js

% nano wwwroot/index.html
[
<!DOCTYPE html>
<html>
  <head>
    <title>CS WebAssembly</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CS WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]

% cat wwwroot/index.html

[
% wget https://www.google.com/favicon.ico --directory-prefix=wwwroot
]

% ls wwwroot

% dotnet build

% dotnet run


# Terminal New Window
# curl or browse form dotnet run


# HTTP server
[
% dotnet clean
% dotnet build --configuration Debug
]
% dotnet build --configuration Release 

% cd ..

% cp -r Wasm/bin/Release/net9.0 WasmRelease

% cp Wasm/wwwroot/* WasmRelease/wwwroot

% cp WasmRelease/wwwroot/_framework/blazor.boot.json WasmRelease/wwwroot

% cd WasmRelease/wwwroot

[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000




# Java

[
% cd $HOME
% cd $HOME/Desktop/GitHub/Auxiliary-Add/WebAssembly
]

% mkdir -p Java

% cd Java

[
// Java 23
// OpenJDK 23
// Apache Maven 3.9.9
// % export JAVA_HOME="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home"
// % export M2_HOME="$HOME/Downloads/Software/ApacheMaven/apache-maven-3.9.9"
// % export M2="$M2_HOME/bin"
// % export PATH=$PATH:"$M2:$JAVA_HOME/bin"
// [
// % export MAVEN_OPTS="-Xms256m -Xmx512m"
// ]
// % export MAVEN_OPTS="-Xms256m -Xmx512m --enable-preview"
// Or
// % export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home//bin/:$HOME/Downloads/Software/ApacheMaven/apache-maven-3.9.9/bin/":$PATH
]

// JDK 8 // % java -version
// % export PATH="$HOME/Downloads/Software/JDK/JDK8/jdk1.8.0_401.jdk//Contents/Home//bin/:$HOME/Downloads/Software/ApacheMaven/apache-maven-3.9.9/bin/":$PATH

% java -version

% mvn --version

[
% mvn -DarchetypeCatalog=local -DarchetypeGroupId=org.teavm -DarchetypeArtifactId=teavm-maven-webapp -DarchetypeVersion=0.10.2 archetype:generate
]
% mvn -DarchetypeCatalog=local -DarchetypeGroupId=org.teavm -DarchetypeArtifactId=teavm-maven-webapp -DarchetypeVersion=0.5.1 archetype:generate

# com.commons

# wasmbrowser

# 1.0.0

# com.commons.project

# Y

% cd wasmbrowser

% mvn package

# pom.xml # Edit
[

#
      <!-- Configure WAR plugin to include JavaScript files generated by TeaVM -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <webResources>
            <resource>
              <directory>${project.build.directory}/webapp</directory>
            </resource>
          </webResources>
        </configuration>
      </plugin>

#
            <configuration>
              <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings
                   of the WAR plugin -->
              <targetDirectory>${project.build.directory}/webapp/wasm</targetDirectory>
              <targetFileName>index.wasm</targetFileName>
              <targetType>WEBASSEMBLY</targetType>

              <!-- Main class, containing static void main(String[]) -->
              <mainClass>com.commons.project.Client</mainClass>

              <!-- Optimization level. Valid values are: SIMPLE, ADVANCED, FULL -->
              <optimizationLevel>ADVANCED</optimizationLevel>
            </configuration>

# 
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>

        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <includePluginDependencies>true</includePluginDependencies>
          <mainClass>fi.iki.elonen.SimpleWebServer</mainClass>
           <arguments>
            <argument>-d</argument>
            <argument>${project.build.directory}/${project.build.finalName}</argument>
          </arguments>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.nanohttpd</groupId>
		<artifactId>nanohttpd-webserver</artifactId>
		<version>2.3.1</version>
          </dependency>
        </dependencies>
      </plugin>

]

% cat pom.xml
[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.commons</groupId>
  <artifactId>wasmbrowser</artifactId>
  <version>1.0.0</version>
  <packaging>war</packaging>

  <properties>
    <java.version>1.8</java.version>
    <teavm.version>0.5.1</teavm.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <!-- Emulator of Java class library for TeaVM -->
    <dependency>
      <groupId>org.teavm</groupId>
      <artifactId>teavm-classlib</artifactId>
      <version>${teavm.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- JavaScriptObjects (JSO) - a JavaScript binding for TeaVM -->
    <dependency>
      <groupId>org.teavm</groupId>
      <artifactId>teavm-jso-apis</artifactId>
      <version>${teavm.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Servlet 3.1 specification -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Configure Java compiler to use Java 8 syntax  -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>

      <!-- Configure WAR plugin to include JavaScript files generated by TeaVM -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <webResources>
            <resource>
              <directory>${project.build.directory}/webapp</directory>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <!-- Configure TeaVM -->
      <plugin>
        <groupId>org.teavm</groupId>
        <artifactId>teavm-maven-plugin</artifactId>
        <version>${teavm.version}</version>
        <executions>
          <execution>
            <id>web-client</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings
                   of the WAR plugin -->
              <targetDirectory>${project.build.directory}/webapp/wasm</targetDirectory>
              <targetFileName>index.wasm</targetFileName>
              <targetType>WEBASSEMBLY</targetType>

              <!-- Main class, containing static void main(String[]) -->
              <mainClass>com.commons.project.Client</mainClass>

              <!-- Optimization level. Valid values are: SIMPLE, ADVANCED, FULL -->
              <optimizationLevel>ADVANCED</optimizationLevel>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>

        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <includePluginDependencies>true</includePluginDependencies>
          <mainClass>fi.iki.elonen.SimpleWebServer</mainClass>
           <arguments>
            <argument>-d</argument>
            <argument>${project.build.directory}/${project.build.finalName}</argument>
          </arguments>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.nanohttpd</groupId>
		<artifactId>nanohttpd-webserver</artifactId>
		<version>2.3.1</version>
          </dependency>
        </dependencies>
      </plugin>

    </plugins>
  </build>
</project>
]

% nano $HOME/Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/src/main/java/com/commons/project/Client.java
[
package com.commons.project;

import org.teavm.interop.*;

public class Client {

    @Export(name = "math")
    public static void math(int x, int y) {
        run(x * y);
    }

    @Import(module = "env", name = "run")
    private static native void run(int number);
}
]
% cat $HOME/Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/src/main/java/com/commons/project/Client.java

% nano $HOME//Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/src/main/webapp/index.js
[
let x = 5;
let y = 7;
let result = 0;

function run(number) {
    console.log("WASM called JavaScript run method.");
    result = number;
    console.log(`Math: ${x} x ${y} = ${result}`);
}

WebAssembly.instantiateStreaming (
  fetch('wasm/index.wasm'), {env: {run}})
    .then(module => { 
      console.log("Calling the wasm module from JavaScript.");

      module.instance.exports.math(x, y);

      document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
});
]
% cat $HOME//Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/src/main/webapp/index.js

% nano $HOME//Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/src/main/webapp/index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Java WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]
% cat $HOME//Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/src/main/webapp/index.html

% mkdir -p src/main/resources/META-INF/nanohttpd/

% ls -p src/main/resources/META-INF/nanohttpd/

% nano src/main/resources/META-INF/nanohttpd/mimetypes.properties
[
wasm=application/wasm
]

% cat src/main/resources/META-INF/nanohttpd/mimetypes.properties

[
% ls src/main/webapp
% wget https://www.google.com/favicon.ico --directory-prefix=src/main/webapp
% ls src/main/webapp
]

% mvn clean

% mvn package


# Terminal New Window
% curl http://127.0.0.1:8080
% open http://127.0.0.1:8080

% jar tvf target/wasmbrowser-1.0.0.war

% export JAVA_HOME="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/"

% cd "$HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/bin"

% ./startup.sh

% open http://localhost:8080/

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% cp $HOME/Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/target/wasmbrowser-1.0.0.war $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% open http://localhost:8080/wasmbrowser-1.0.0

% ./shutdown.sh

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% rm -rf $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps/wasmbrowser-1.0.0.war

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps


cd $HOME/Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/target/wasmbrowser-1.0.0

# HTTP server
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]


# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000





// Credits
/*
https://webassembly.org/
https://emscripten.org/
https://assemblyscript.org/
https://typescriptlang.org/
https://tinygo.org/
https://go.dev/
https://rust-lang.org/
https://dotnet.microsoft.com/
https://openjdk.org/
https://oracle.com/java/
https://developer.mozilla.org/
*/