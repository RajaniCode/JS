###########################################################################################################################

# WebAssembly (Wasm) 

###########################################################################################################################
***************************************************************************************************************************

# emsdk

***************************************************************************************************************************
[
% cd $HOME
]

% git clone https://github.com/emscripten-core/emsdk.git

% cd emsdk

% ./emsdk install latest

% ./emsdk activate latest

% source ./emsdk_env.sh

% emcc --version

# C

% mkdir -p C

% cd C

% nano index.c  
[
#include <stdio.h>

int main() {
  printf("%s\n", __VERSION__);
  printf("%s\n", __DATE__);
  printf("%s\n", __TIME__);
  return 0;
}
]
% cat index.c  

[
% gcc --version

% gcc index.c -o index

% ./index
]

# Emscripten JavaScript
% emcc index.c -o index.js

% node --version

# Emscripten Node.js
% node index.js

# Emscripten HTML
# Emscripten optimize code for size
% emcc index.c -O3 -o index.html

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# C # emcc

***************************************************************************************************************************
% brew install emscripten

% emcc --version

[
% cd $HOME
]

% mkdir -p C

% cd C

% nano index.c  
[
#include <stdio.h>

int main() {
  printf("%s\n", __VERSION__);
  printf("%s\n", __DATE__);
  printf("%s\n", __TIME__);
  return 0;
}
]
% cat index.c  

[
% gcc --version

% gcc index.c -o index

% ./index
]

# Emscripten JavaScript
% emcc index.c -o index.js

% node --version

# Emscripten Node.js
% node index.js

# Emscripten HTML
# Emscripten optimize the code for size
% emcc index.c -O3 -o index.html

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# TypeScript # npm # asc

***************************************************************************************************************************
[
% cd $HOME
]

% mkdir -p TypeScript

% cd TypeScript

% nano index.ts
[
export function math(x: i32, y: i32): i32 {
  return x * y;
}
]
% cat index.ts

# AssemblyScript Compiler for WebAssembly (wasm)
[
% npm install -g assemblyscript
]
% asc --version

# index.ts to wasm
% asc index.ts -o index.wasm

% nano index.js
[
export const wasm = async (source, importObject) => {
  let response = undefined;

  if (!importObject) {
    importObject = { imported_func: { arg: () => console.log(arg) },
    };
  }

  if (WebAssembly.instantiateStreaming) {
    response = await WebAssembly.instantiateStreaming(
      fetch(source),
      importObject
    );
  } else {
    const fetchThenInstantiate = async () => {
      const buffer = await fetch(source).then(response =>
        response.arrayBuffer()
      );
      return WebAssembly.instantiate(buffer, importObject);
    };
    response = await fetchThenInstantiate();
  }

  return response;
};

const wasmFunc = async () => {
  const module = await wasm("./index.wasm");

  const x = 5;
  const y = 7;
  const result = module.instance.exports.math(5, 7);

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
};

wasmFunc();
]
% cat index.js

% nano index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>TypeScript WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]
% cat index.html

[
% wget https://www.google.com/favicon.ico
]

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# Swift

***************************************************************************************************************************
[
% cd $HOME/Desktop/GitHub/JavaScript-1/WebAssembly
]

% mkdir -p Swift

% cd Swift

% swift --version

% swiftc --version

## Installation
# Swift Toolchain # pkg
# Download the appropriate Swift toolchain version from swift.org/install 
# swift-5.10-RELEASE-osx.pkg

[
# Debugging Symbols # pkg
# swift-5.10-RELEASE-osx-symbols.pkg
]

% swift --version

% swiftc --version

# Run the package installer, which will install an Xcode toolchain into /Library/Developer/Toolchains/
% ls /Library/Developer/Toolchains
[
swift-5.10-RELEASE.xctoolchain	swift-latest.xctoolchain
]

# rm Toolchains
[
% sudo rm -rf /Library/Developer/Toolchains/*
]

# NB
[
# An Xcode toolchain (.xctoolchain) includes a copy of the compiler, LLDB, and other related tools needed to provide a cohesive development experience for working in a specific version of Swift

# To select the installed toolchain in Xcode, navigate to Xcode > Toolchains.

# Xcode uses the selected toolchain for building Swift code, debugging, and even code completion and syntax coloring. You’ll see a new toolchain indicator in Xcode’s toolbar when Xcode is using an installed toolchain. Select the default toolchain to go back to Xcode’s built-in tools.

# Selecting a toolchain in Xcode affects the IDE only. To use the installed toolchain with xcrun, pass the --toolchain swift option. For example:

% xcrun --toolchain swift swift --version

# xcodebuild, pass the -toolchain swift option.

# Alternatively, you may select the toolchain on the command line by exporting the TOOLCHAINS environment variable as follows:

% export TOOLCHAINS=$(plutil -extract CFBundleIdentifier raw /Library/Developer/Toolchains/<toolchain name>.xctoolchain/Info.plist)
]

[
% xcrun --version

% xcrun --toolchain swift swift --version
]

% ls -l `which swift`
% ls /usr/bin/
[
% ls /usr/bin/swift
% ls /usr/bin/swift-inspect
% ls /usr/bin/swiftc
]

## Swift SDK for WebAssembly # Cross compile to WebAssembly
# Match the Swift Toolchain Version # swift-5.10-RELEASE # swift-wasm-5.10.0-RELEASE
# Install Swift SDKs for WebAssembly 
% wget https://github.com/swiftwasm/swift/releases/download/swift-wasm-5.10.0-RELEASE/swift-wasm-5.10.0-RELEASE-macos_arm64.artifactbundle.zip
% swift sdk install swift-wasm-5.10.0-RELEASE-macos_arm64.artifactbundle.zip

% swift sdk list
[
5.10.0-RELEASE-wasm
]

# swift sdk remove
[
% swift sdk remove 5.10.0-RELEASE-wasm

% swift sdk list
]

# Run the package installer, which will install an Xcode toolchain into /Library/Developer/Toolchains/
% ls /Library/Developer/Toolchains
[
swift-5.10-RELEASE.xctoolchain	swift-latest.xctoolchain
]

# Swift file
% nano sample.swift
[
#if os(macOS)
print("macOS")
#elseif os(iOS)
print("iOS")
#elseif os(watchOS)
print("watchOS")
#elseif os(tvOS)
print("tvOS")
#endif

#if swift(>=5.0)
print("Swift >= 5.0")
#else
print("Swift < 5.0")
#endif

print("[1, 3, 5, 7].reduce(0, +) = \([1, 3, 5, 7].reduce(0, +))")

print("[1, 3, 5, 7].reduce(1, *) = \([1, 3, 5, 7].reduce(1, *))")
]

% cat sample.swift

% swift sample.swift

## Terminal New Window # SwiftWasm
[
% cd $HOME
]
# SwiftWasm Toolchain Installation # pkg
% wget https://github.com/swiftwasm/swift/releases/download/swift-wasm-5.10.0-RELEASE/swift-wasm-5.10.0-RELEASE-macos_arm64.pkg
[
% curl -L -o swift-wasm-5.10.0-RELEASE-macos_arm64.pkg https://github.com/swiftwasm/swift/releases/download/swift-wasm-5.10.0-RELEASE/swift-wasm-5.10.0-RELEASE-macos_arm64.pkg
]
# swift-wasm-5.10.0-RELEASE-macos_arm64.pkg

# Run the package installer, which will install an Xcode toolchain into /Library/Developer/Toolchains/
% ls /Library/Developer/Toolchains
[
swift-5.10-RELEASE.xctoolchain		swift-latest.xctoolchain		swift-wasm-5.10.0-RELEASE.xctoolchain
]

% swift --version
[
swift-driver version: 1.115.1 Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
]

% swiftc --version
[
swift-driver version: 1.115.1 Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
]

# export swift-wasm Toolchain
% export PATH="/Library/Developer/Toolchains/swift-wasm-5.10.0-RELEASE.xctoolchain/usr/bin/":$PATH

% swift --version
[
SwiftWasm Swift version 5.10-dev (LLVM e98989b1092ff3a, Swift 23e8e340a7a32a7)
]

% swiftc --version
[
SwiftWasm Swift version 5.10-dev (LLVM e98989b1092ff3a, Swift 23e8e340a7a32a7)
]

# Compile Swift code into WebAssembly with WASI
% swiftc -target wasm32-unknown-wasi sample.swift -o sample.wasm

# Run the produced binary on WebAssembly runtime
[
% wget https://wasmtime.dev/install.sh
]
% curl https://wasmtime.dev/install.sh -sSf | bash
[
...
     Editing user profile (/Users/rajaniapple/.zshrc)
    Finished installation. Open a new terminal to start using Wasmtime!
]

% cat /Users/rajaniapple/.zshrc
[
...
export WASMTIME_HOME="$HOME/.wasmtime"

export PATH="$WASMTIME_HOME/bin:$PATH"
]

## Terminal New Window # wasmtime
[
% cd $HOME
]

% wasmtime --version

% wasmtime sample.wasm

## SwiftPM package to WebAssembly
# Terminal New Window # SwiftPM # SwiftWasm
[
% cd $HOME
]

% mkdir -p SwiftWasm

% cd SwiftWasm

# export swift-wasm Toolchain
% export PATH="/Library/Developer/Toolchains/swift-wasm-5.10.0-RELEASE.xctoolchain/usr/bin/":$PATH

# Create a package from template
% swift --version
[
SwiftWasm Swift version 5.10-dev (LLVM e98989b1092ff3a, Swift 23e8e340a7a32a7)
Target: arm64-apple-darwin24.1.0
]
% swift package init --type executable --name Sample 

# Build the Project into a WebAssembly binary # SwiftPM # SwiftWasm
# --triple option, which indicates that you are building for the target
% swift build --triple wasm32-unknown-wasi

# Run the produced binary
% wasmtime --version

% wasmtime ./.build/wasm32-unknown-wasi/debug/Sample.wasm
[
Hello, world!
]

## SwiftPM package to WebAssembly
# Terminal New Window # SwiftPM # Swift SDK # Swift
[
% cd $HOME
]

% mkdir -p SwiftSDK

% cd SwiftSDK

# Create a package from template
% swift --version
[
swift-driver version: 1.115.1 Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
Target: arm64-apple-macosx15.0
]

# Build the Project into a WebAssembly binary  # SwiftPM # Swift SDK # Swift
% swift package init --type executable --name Sample 

# When Swift SDK is installed
# swift build --swift-sdk <SDK name>
% swift build --swift-sdk 5.10.0-RELEASE-wasm

# Run the produced binary
% wasmtime --version

% wasmtime ./.build/wasm32-unknown-wasi/debug/Sample.wasm
[
Hello, world!
]
***************************************************************************************************************************


***************************************************************************************************************************

# Go # tinygo

***************************************************************************************************************************
[
% cd $HOME
]

% mkdir -p Go

% cd Go

% nano index.go
[
package main

import "fmt"
import "runtime"

// % go run ./index.go % tinygo run ./index.go
func main() {
  fmt.Println("Runtime Version: " + runtime.Version());
  var x int = 555;
  var y int = 777;
  var result int = x * y;  
  fmt.Printf("Math: %d x %d = %d\n", x, y, result);
}

// Comment "export math" to make the func callable from JavaScript
//export math
func math(x int, y int) int {
  return x * y;
}
]
% cat index.go

# index.go to wasm
[
% go version
% tinygo version
% go run ./index.go
% tinygo run ./index.go
]
% tinygo build -o index.wasm -target wasm ./index.go

# wasm_exec.js from TinyGo root
% ls
% ls $(tinygo env TINYGOROOT)/targets/wasm_exec.js
% cp $(tinygo env TINYGOROOT)/targets/wasm_exec.js .
% ls

# NB
# wasm_exec.js must match tinygo version

% nano index.js
[
export const wasm = async (source, importObject) => {
  let response = undefined;

  if (WebAssembly.instantiateStreaming) {
    response = await WebAssembly.instantiateStreaming(
      fetch(source),
      importObject
    );
  } else {
    const fetchThenInstantiate = async () => {
      const buffer = await fetch(source).then(response =>
        response.arrayBuffer()
      );
      return WebAssembly.instantiate(buffer, importObject);
    };

    response = await fetchThenInstantiate();
  }

  return response;
};

const wasmFunc = async () => {
  const go = new Go();
  const importObject = go.importObject;

  const module = await wasm("./index.wasm", importObject);

  go.run(module.instance);

  const x = 5;
  const y = 7;
  const result = module.instance.exports.math(5, 7);

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
};

wasmFunc();
]
% cat index.js

% nano index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Go WebAssembly</title>
  </head>
  <body>
    <script src="./wasm_exec.js"></script>
    <script type="module" src="./index.js"></script>
  </body>
</html>
]
% cat index.html

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# Rust # cargo # wasm-pack

***************************************************************************************************************************
[
% cd $HOME
]

% mkdir -p Rust

% cd Rust

[
% curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
]
% cargo --version

% cargo init

# The name `Rust` is not snake_case or kebab-case which is recommended for package names, consider `rust`
% nano Cargo.toml
[
[package]
name = "rust"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
wasm-bindgen = "0.2"
]

% cat Cargo.toml

# find library `Rust`, rename file to `src/lib.rs` or specify lib.path
% ls src
% cat src/main.rs 
% mv src/main.rs src/lib.rs
% ls src
% cat src/lib.rs

% nano src/lib.rs
[
use wasm_bindgen::prelude::*;

// Comment #[wasm_bindgen] to export the function, callable from JavaScript
#[wasm_bindgen]
pub fn math(x: i32, y: i32) -> i32 {
  return x * y;
}
]
% cat src/lib.rs

[
% cargo install wasm-pack
]
% wasm-pack --version

# Rust crate wasm-pack wasm
% wasm-pack build --target web

% nano index.js
[
import init from "./pkg/rust.js";

const wasmFunc = async () => {
  const module = await init("./pkg/rust_bg.wasm");

  const x = 5;
  const y = 7;
  const result = module.math(5, 7);

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
};

wasmFunc();
]
% cat index.js

% nano index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Rust WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]
% cat index.html

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# Python # Pyodide

***************************************************************************************************************************
[
% cd $HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Python/
]

% nano complete.html
[
<!doctype html>
<html>
  <head>
      <script src="https://cdn.jsdelivr.net/pyodide/v0.27.0/full/pyodide.js"></script>
  </head>
  <body>
    Pyodide test page <br>
    Open your browser console to see Pyodide output
    <script type="text/javascript">
      async function main(){
        let pyodide = await loadPyodide();
        console.log(pyodide.runPython(`
            import sys
            sys.version
        `));
        pyodide.runPython("x = 5; y = 7; print(f'Math: {x} x {y} = { x * y }')");
      }
      main();
    </script>
  </body>
</html>
]

% cat complete.html

% open -n -a "Google Chrome" --args "--new-window" file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Python/complete.html

% nano alternative.html
[
<!doctype html>
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/pyodide/v0.27.0/full/pyodide.js"></script>
  </head>

  <body>
    <p>
      You can execute any Python code [Run import statement(s) beforehand just in case]. Just enter something in the box below and
      click the button.
    </p>
    <!-- <input id="code" value="sum([1, 3, 5, 7])" /> -->
    <input id="code" value="reduce(mul, [1, 3, 5, 7])" />
    <button onclick="evaluatePython()">Run</button>
    <br />
    <br />
    <div>Output:</div>
    <textarea id="output" style="width: 100%;" rows="6" disabled></textarea>

    <script>
      const output = document.getElementById("output");
      const code = document.getElementById("code");

      function addToOutput(s) {
        output.value += ">>> " + code.value + "\n" + s + "\n";
      }

      output.value = "Initializing...\n";

      // init Pyodide
      async function main() {
        let pyodide = await loadPyodide();

	pyodide.runPython(`
  	  # import sys
  	  # sys.version
  	  from functools import reduce
  	  from operator import mul
`	);

        output.value += "Ready!\n";
        return pyodide;
      }

      let pyodideReadyPromise = main();

      async function evaluatePython() {
        let pyodide = await pyodideReadyPromise;
        try {
          let output = pyodide.runPython(code.value);
          addToOutput(output);
        } catch (err) {
          addToOutput(err);
        }
      }
    </script>
  </body>
</html>
]

% cat alternative.html

% open -n -a "Google Chrome" --args "--new-window" file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Python/alternative.html

===========================================================================================================================
# CDN
===========================================================================================================================
% wget https://cdn.jsdelivr.net/pyodide/v0.27.0/full/pyodide.js --directory-prefix=CDN
===========================================================================================================================

===========================================================================================================================
# Pyodide
===========================================================================================================================
[
% cd $HOME
]
% wget https://github.com/pyodide/pyodide/releases/download/0.27.0/pyodide-0.27.0.tar.bz2
% sudo tar -xvzf pyodide-0.27.0.tar.bz2
% cd pyodide
% ./python 
[
Python 3.12.7 (main, Dec 31 2024, 17:05:22) [Clang 19.0.0git (https:/github.com/llvm/llvm-project 0a8cd1ed1f4f35905df318015b on emscripten
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 5
>>> y = 7
>>> print( f'Math: {x} x {y} = { x * y }' )
Math: 5 x 7 = 35
>>> print( 'Math: {:} x {:} = {:}'.format(x, y, x * y) )
Math: 5 x 7 = 35
>>> sum([1, 3, 5, 7])
16
>>> from functools import reduce
>>> from operator import mul
>>> reduce(mul, [1, 3, 5, 7])
105
>>> exit()
]

[
% find . -depth -size +50M -print
]
% find . -depth 1 -size +50M -print

% zip "pyodide-0.27.0.tar.bz2.zip" "pyodide-0.27.0.tar.bz2"

% zip "pyodide-0.27.0.tar.bz2.zip" --out "Split pyodide-0.27.0.tar.bz2.zip" -s 45m

[
% find . -depth -size +50M -print
]
% find . -depth 1 -size +50M -print

% find . -depth -size +50M -delete
[
% find . -depth 1 -size +50M -delete
]

% find . -depth -size +50M -print

% 7z x "Split pyodide-0.27.0.tar.bz2.zip"

% rm -rf pyodide-0.27.0.tar.bz2

% sudo rm -rf pyodide

% find . -depth -size +50M -print

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000/complete.html
% open http://127.0.0.1:8000/complete.html

% curl http://127.0.0.1:8000/alternative.html
% open http://127.0.0.1:8000/alternative.html
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# CS # dotnet # Node.js

***************************************************************************************************************************
[
% cd $HOME
]

% dotnet --version

% mkdir -p CS

% cd CS

% dotnet new console --name Wasm

% cd Wasm

[
% dotnet new sln -n Wasm

% dotnet sln Wasm.sln add Wasm.csproj
]

% dotnet run

% nano Wasm.csproj
[
<Project Sdk="Microsoft.NET.Sdk.WebAssembly">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
</Project>
]

% cat Wasm.csproj

% nano Program.cs
[
using System;
using System.Threading.Tasks;

internal class Program
{
    private static async Task Main()
    {
        int result = await Interop.Run(555, 777);
	Console.WriteLine($"CS Task Main() await = {result}");
    }
}
]
% cat Program.cs

% nano Interop.cs
[
using System;
using System.Runtime.InteropServices.JavaScript;
using System.Threading.Tasks;

public partial class Interop
{
    [JSImport("math", "Shim")]
    [return: JSMarshalAs<JSType.Number>]
    public static partial int Math([JSMarshalAs<JSType.Number>] int x, [JSMarshalAs<JSType.Number>] int y);

   [JSExport]
    public static async Task<int> Run(int x, int y)
    {
        await JSHost.ImportAsync("Shim", "/Shim.js");

	int result = Interop.Math(x, y);

	Console.WriteLine($"Math from CS loaded JS module: {x} * {y} = {result}");

	return result;
    }
}
]

% cat Interop.cs

% mkdir -p wwwroot

% ls wwwroot

% nano wwwroot/index.js
[
import { dotnet } from './_framework/dotnet.js'

const { setModuleImports, getAssemblyExports, getConfig, runMain } = await dotnet
    .withApplicationArguments("start")
    .create();

const config = getConfig();
const exports = await getAssemblyExports(config.mainAssemblyName);

try  {
  const x = 5;
  const y = 7;
  const result = JSON.stringify(await exports.Interop.Run(x, y));

  document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
} catch(error) {
  console.error(error);
}

await dotnet.run();
]

% cat wwwroot/index.js

% nano wwwroot/Shim.js
[
export function math(x, y) {
  console.log(`Math from JavaScript: ${x} * ${y} = ${x + y}`);
  return (x * y);
}
]
% cat wwwroot/Shim.js

% nano wwwroot/index.html
[
<!DOCTYPE html>
<html>
  <head>
    <title>CS WebAssembly</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CS WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]

% cat wwwroot/index.html

[
% wget https://www.google.com/favicon.ico --directory-prefix=wwwroot
]

% ls wwwroot

% dotnet build

% dotnet run

===========================================================================================================================
# Terminal New Window
# curl http(s) or open http(s) form dotnet run
===========================================================================================================================

===========================================================================================================================
# Manual # Copy # Build # Release
===========================================================================================================================
[
% dotnet restore
% dotnet clean
% dotnet build --configuration Debug
% dotnet build --configuration Release 
]

[
% cd $HOME

% cp -r Wasm/bin/Release/net9.0 WasmRelease

% cp Wasm/wwwroot/* WasmRelease/wwwroot

% cp WasmRelease/wwwroot/_framework/blazor.boot.json WasmRelease/wwwroot

% cd WasmRelease/wwwroot
]
===========================================================================================================================

===========================================================================================================================
# Publish # Release # Default
===========================================================================================================================
[
% dotnet restore
% dotnet clean
% dotnet build --configuration Debug
% dotnet build --configuration Release 
]

[
% rm -rf bin
% rm -rf obj
]
% dotnet publish

% cd bin/Release/net9.0/publish/wwwroot

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================

===========================================================================================================================
# CS # dotnet # wasmbrowser
===========================================================================================================================
[
% cd $HOME
]

% dotnet --version

% dotnet new wasmbrowser --name WasmBrowser

% cd WasmBrowser

% dotnet build

% dotnet run
===========================================================================================================================
# Terminal New Window
# curl http(s) or open http(s) form dotnet run
===========================================================================================================================

===========================================================================================================================
# CS # Node.js # dotnet # wasmconsole
===========================================================================================================================
[
% cd $HOME
]

% dotnet --version

% dotnet new wasmconsole --name WasmConsole

% cd WasmConsole

[
% sudo dotnet workload restore
]

[
% dotnet build -c Debug
]
% dotnet build -c Release

[
% dotnet run -c Debug
]
% dotnet run -c Release
[
WasmAppHost --runtime-config /Users/rajaniapple/Desktop/GitHub/JavaScript-1/WebAssembly/CS/WasmConsole/bin/Release/net9.0/browser-wasm/AppBundle/WasmConsole.runtimeconfig.json
MONO_WASM: Error loading symbol file dotnet.native.js.symbols: {}
Hello, World! Greetings from node version: v23.1.0
Hello, Console!
]

[
% node bin/Debug/net9.0/browser-wasm/AppBundle/main.mjs
]
% node bin/Release/net9.0/browser-wasm/AppBundle/main.mjs
[
MONO_WASM: Error loading symbol file dotnet.native.js.symbols: {}
Hello, World! Greetings from node version: v23.1.0
Hello, Console!
]
***************************************************************************************************************************


***************************************************************************************************************************

# FS # dotnet # Bolero

***************************************************************************************************************************
[
% cd $HOME/Desktop/GitHub/JavaScript-1/WebAssembly
]

% mkdir -p FS

% cd FS

% dotnet --version

# Creating a project
[
% sudo dotnet new -i Bolero.Templates
]
% sudo dotnet new install Bolero.Templates

[
% sudo dotnet workload update
]

[
% sudo dotnet new bolero-app -o FSWebAssembly
]
% sudo dotnet new bolero-app -o FSWebAssembly --force

% ls

% cd FSWebAssembly

[
% sudo dotnet run --project src/FSWebAssembly.Server
]
# The ASP.NET Core developer certificate is in an invalid state. To fix this issue, run 'dotnet dev-certs https --clean' and 'dotnet dev-certs https' to remove all existing ASP.NET Core development certificates and create a new untrusted developer certificate. On macOS or Windows, use 'dotnet dev-certs https --trust' to trust the new certificate.
[
% sudo dotnet dev-certs https --trust
]
% sudo dotnet dev-certs https --clean

% sudo dotnet dev-certs https

% sudo dotnet dev-certs https --trust

% sudo dotnet run --project src/FSWebAssembly.Server
===========================================================================================================================

===========================================================================================================================
# Terminal New Window # http(s) # curl # wget # open
===========================================================================================================================
---------------------------------------------------------------------------------------------------------------------------
# https
---------------------------------------------------------------------------------------------------------------------------
# curl: (60) SSL certificate problem: unable to get local issuer certificate
# More details here: https://curl.se/docs/sslcerts.html
# -k
% curl -k https://localhost:44303/

# ERROR: cannot verify localhost's certificate, issued by ‘CN=localhost’:
#  Self-signed certificate encountered.
# To connect to localhost insecurely, use `--no-check-certificate'.
# --no-check-certificate
% wget -S -O - https://localhost:44303/ --no-check-certificate

% open https://localhost:44303/
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
# http
---------------------------------------------------------------------------------------------------------------------------
% curl http://localhost:5015/
% wget -S -O - http://localhost:5015/
% open http://localhost:5015/
---------------------------------------------------------------------------------------------------------------------------
===========================================================================================================================

# Browser
# https://localhost:44303/ # http://localhost:5015/
# Sign in
[
Username: fsharp
Password: password
]
sign in

# Click Reload
# Sign out

***************************************************************************************************************************


***************************************************************************************************************************

# Ruby # WASI # ruby.wasm # wasmtime # Node.js

***************************************************************************************************************************
[
% cd $HOME
]

# Ruby on Browser
% mkdir -p "Ruby on Browser"

% cd "Ruby on Browser"

% nano index.html
[
<html>
  <script src="https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/browser.script.iife.js"></script>
  <script type="text/ruby">
    require "js"

    # (Printed to the Web browser console)
    # option + command + I
    # Safari > Settings > Advanced > Select “Show features for web developers”
    puts RUBY_VERSION 
    x = 5; 
    y = 7;
    puts "Math: #{x} x #{y} = #{x * y}"

    JS.global[:document].write "Hola!"
  </script>
</html>
]

% cat index.html

% open -n -a "Google Chrome" --args "--new-window" "file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Ruby/Ruby%20on%20Browser/index.html"

# Run Ruby on browser by using browser.script.iife.js script from CDN
% nano ruby_on_browser.html
[
<html>
  <script src="https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/browser.script.iife.js"></script>
  <script type="text/ruby">
    require "js"
    JS.global[:document].write "Hola!"
  </script>
</html>
]
% cat ruby_on_browser.html

% open -n -a "Google Chrome" --args "--new-window" "file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Ruby/Ruby%20on%20Browser/ruby_on_browser.html"

# Control Ruby VM from JavaScript by using @ruby/wasm-wasi package API
% nano ruby_wasm_wasi.html
[
<html>
  <script type="module">
    import { DefaultRubyVM } from "https://cdn.jsdelivr.net/npm/@ruby/wasm-wasi@2.7.0/dist/browser/+esm";
    const response = await fetch("https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/ruby+stdlib.wasm");
    const module = await WebAssembly.compileStreaming(response);
    const { vm } = await DefaultRubyVM(module);

    vm.eval(`
      require "js"
      JS.global[:document].write "Hola!"
    `);
  </script>
</html>
]
% cat ruby_wasm_wasi.html

% open -n -a "Google Chrome" --args "--new-window" "file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Ruby/Ruby%20on%20Browser/ruby_wasm_wasi.html"

# Alternative Without ES Modules
% nano ruby_wasm_wasi_without_es.html
[
<html>
  <script src="https://cdn.jsdelivr.net/npm/@ruby/wasm-wasi@2.7.0/dist/browser.umd.js"></script>
  <script>
    const main = async () => {
      const { DefaultRubyVM } = window["ruby-wasm-wasi"];
      const response = await fetch("https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/ruby+stdlib.wasm");
      const module = await WebAssembly.compileStreaming(response);
      const { vm } = await DefaultRubyVM(module);

      vm.eval(`
        require "js"
        JS.global[:document].write "Hola!"
      `);
    }
    main()
  </script>
</html>
]
% cat ruby_wasm_wasi_without_es.html

% open -n -a "Google Chrome" --args "--new-window" "file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Ruby/Ruby%20on%20Browser/ruby_wasm_wasi_without_es.html"

# await JavaScript Promise from Ruby
# data-eval="async" attribute is required to use await in <script> tag
% nano async_await.html
[
<html>
  <script src="https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/browser.script.iife.js"></script>
  <script type="text/ruby" data-eval="async">
    require "js"

    response = JS.global.fetch("https://www.ruby-lang.org/").await

    # (Printed to the Web browser console)
    # option + command + I
    # Safari > Settings > Advanced > Select “Show features for web developer
    puts response[:status]
  </script>
</html>
]
% cat async_await.html

% open -n -a "Google Chrome" --args "--new-window" "file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Ruby/Ruby%20on%20Browser/async_await.html"

# Or using @ruby/wasm-wasi package API RubyVM#evalAsync
% nano async_await_wasm_wasi.html
[
<html>
  <script type="module">
    import { DefaultRubyVM } from "https://cdn.jsdelivr.net/npm/@ruby/wasm-wasi@2.7.0/dist/browser/+esm";
    const response = await fetch("https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/ruby+stdlib.wasm");
    const module = await WebAssembly.compileStreaming(response);
    const { vm } = await DefaultRubyVM(module);

    vm.evalAsync(`
      require "js"

      response = JS.global.fetch("https://www.ruby-lang.org/").await

      # (Printed to the Web browser console)
      # option + command + I
      # Safari > Settings > Advanced > Select “Show features for web developer
      puts response[:status]
    `);
  </script>
</html>
]
% cat async_await_wasm_wasi.html

% open -n -a "Google Chrome" --args "--new-window" "file:///$HOME/Desktop/GitHub/JavaScript-1/WebAssembly/Ruby/Ruby%20on%20Browser/async_await_wasm_wasi.html"

===========================================================================================================================
# NB
===========================================================================================================================
# Get/set JavaScript variables from Ruby
[
require "js"

document = JS.global[:document]
document[:title] = "Hello, world!"
]

# Call JavaScript methods from Ruby
[
require "js"

JS.global[:document].createElement("div")

JS.global[:document].call(:createElement, "div".to_js) # same as above
]

# Pass Ruby Proc to JavaScript (Callback to Ruby)
[
require "js"

JS.global.setTimeout(proc { puts "Hello, world!" }, 1000)

input = JS.global[:document].querySelector("input")
input.addEventListener("change") do |event|
  puts event[:target][:value].to_s
end
]

# new JavaScript instance from Ruby
[
require "js"

JS.global[:Date].new(2000, 9, 13)
]

# Convert returned JavaScript String value to Ruby String
[
require "js"

title = JS.global[:document].title # => JS::Object("Hello, world!")
title.to_s # => "Hello, world!"
]

# Convert JavaScript Boolean value to Ruby true/false
[
require "js"

JS.global[:document].hasFocus? # => true
JS.global[:document].hasFocus  # => JS::Object(true)
]

# Convert JavaScript Number value to Ruby Integer/Float
[
require "js"

rand = JS.global[:Math].random # JS::Object(0.123456789)
rand.to_i # => 0
rand.to_f # => 0.123456789
]
===========================================================================================================================

===========================================================================================================================
# CDN
===========================================================================================================================
% wget https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/browser.script.iife.js --directory-prefix=CDN

% wget https://cdn.jsdelivr.net/npm/@ruby/wasm-wasi@2.7.0/dist/browser/+esm --directory-prefix=CDN

% wget https://cdn.jsdelivr.net/npm/@ruby/3.3-wasm-wasi@2.7.0/dist/ruby+stdlib.wasm --directory-prefix=CDN

% wget https://cdn.jsdelivr.net/npm/@ruby/wasm-wasi@2.7.0/dist/browser.umd.js --directory-prefix=CDN
===========================================================================================================================

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000/index.html
% open http://127.0.0.1:8000/index.html

% curl http://127.0.0.1:8000/ruby_on_browser.html
% open http://127.0.0.1:8000/ruby_on_browser.html

% curl http://127.0.0.1:8000/ruby_wasm_wasi.html
% open http://127.0.0.1:8000/ruby_wasm_wasi.html

% curl http://127.0.0.1:8000/ruby_wasm_wasi_without_es.html
% open http://127.0.0.1:8000/ruby_wasm_wasi_without_es.html

% curl http://127.0.0.1:8000/async_await.html
% open http://127.0.0.1:8000/async_await.html

% curl http://127.0.0.1:8000/async_await_wasm_wasi.html
% open http://127.0.0.1:8000/async_await_wasm_wasi.html
===========================================================================================================================

===========================================================================================================================
# Ruby # WASI # ruby.wasm # wasmtime
===========================================================================================================================
# Package Ruby application as a WASI application
[
% cd $HOME
]

% mkdir -p Ruby

% cd Ruby

% ruby --version

% gem --version

% gem install ruby_wasm

# Download a prebuilt Ruby release
% curl -LO https://github.com/ruby/ruby.wasm/releases/latest/download/ruby-3.3-wasm32-unknown-wasip1-full.tar.gz
% sudo tar xfz ruby-3.3-wasm32-unknown-wasip1-full.tar.gz

# Extract ruby binary not to pack itself
% sudo mv ruby-3.3-wasm32-unknown-wasip1-full/usr/local/bin/ruby ruby.wasm

# Put the app code
% mkdir -p src
% echo "puts 'Ruby: ' + RUBY_DESCRIPTION" > src/wasi_app.rb
# Ruby
% ruby src/wasi_app.rb

% tree

# Pack the whole directory under /usr and the app dir # wasi-ruby-app.wasm
% rbwasm pack ruby.wasm --dir ./src::/src --dir ./ruby-3.3-wasm32-unknown-wasip1-full/usr::/usr -o wasi-ruby-app.wasm

% tree

# Dependencies: wasmtime
# Run the packed scripts
# wasmtime installation
[
% wget https://wasmtime.dev/install.sh
]
% curl https://wasmtime.dev/install.sh -sSf | bash

# Terminal New Window
[
% cd $HOME
]
% wasmtime wasi-ruby-app.wasm /src/wasi_app.rb
[
Ruby: ruby 3.3.3 (2024-06-12 revision f1c7b6f435) [wasm32-wasi]
]
===========================================================================================================================

===========================================================================================================================
# Ruby # Node.js
===========================================================================================================================
% mkdir -p NodeJS

% cd NodeJS

% npm --version

# Install @ruby/3.3-wasm-wasi and @ruby/wasm-wasi from npm
% npm install --save @ruby/3.3-wasm-wasi @ruby/wasm-wasi

# Instantiate a Ruby VM 
% nano index.mjs
[
import fs from "fs/promises";
import { DefaultRubyVM } from "@ruby/wasm-wasi/dist/node";

const binary = await fs.readFile("./node_modules/@ruby/3.3-wasm-wasi/dist/ruby.wasm");
const module = await WebAssembly.compile(binary);
const { vm } = await DefaultRubyVM(module);
vm.eval(`puts "Ruby Version: " + RUBY_VERSION`);
vm.eval(`puts "Ruby Description: " + RUBY_DESCRIPTION`);
vm.eval(`x = 5; y = 7; puts "Math: #{x} x #{y} = #{x * y}"`);;
]

% cat index.mjs

# Run the code with --experimental-wasi-unstable-preview1 flag to enable WASI support
% node --experimental-wasi-unstable-preview1 index.mjs
[
(node:3010) ExperimentalWarning: WASI is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
`RubyGems' were not loaded.
`error_highlight' was not loaded.
`did_you_mean' was not loaded.
`syntax_suggest' was not loaded.
Ruby Version: 3.3.3
Ruby Description: ruby 3.3.3 (2024-06-12 revision f1c7b6f435) [wasm32-wasi]
Math: 5 x 7 = 35
]
===========================================================================================================================
***************************************************************************************************************************


***************************************************************************************************************************

# Java

***************************************************************************************************************************
[
% cd $HOME
]

% mkdir -p Java

% cd Java

[
# Java 23
# OpenJDK 23
# Apache Maven 3.9.9
% export JAVA_HOME="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home"
% export M2_HOME="$HOME/Downloads/Software/ApacheMaven/apache-maven-3.9.9"
% export M2="$M2_HOME/bin"
% export PATH=$PATH:"$M2:$JAVA_HOME/bin"
[
% export MAVEN_OPTS="-Xms256m -Xmx512m"
]
% export MAVEN_OPTS="-Xms256m -Xmx512m --enable-preview"
# Or
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home//bin/:$HOME/Downloads/Software/ApacheMaven/apache-maven-3.9.9/bin/":$PATH

% java --version

% mvn --version

% mvn -DarchetypeCatalog=local -DarchetypeGroupId=org.teavm -DarchetypeArtifactId=teavm-maven-webapp -DarchetypeVersion=0.10.2 archetype:generate

# pom.xml # Edit
  <properties>
    <java.version>23</java.version>
    <teavm.version>0.10.2</teavm.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

      <!-- Configure WAR plugin to include JavaScript files generated by TeaVM -->
      <plugin>
    	<groupId>org.apache.maven.plugins</groupId>
    	<artifactId>maven-war-plugin</artifactId>
        <version>3.4.0</version>
        <configuration>
          <webResources>
            <resource>
              <directory>${project.build.directory}/generated/js</directory>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>

        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <includePluginDependencies>true</includePluginDependencies>
          <mainClass>fi.iki.elonen.SimpleWebServer</mainClass>
           <arguments>
            <argument>-d</argument>
            <argument>${project.build.directory}/${project.build.finalName}</argument>
          </arguments>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.nanohttpd</groupId>
		<artifactId>nanohttpd-webserver</artifactId>
		<version>2.3.1</version>
          </dependency>
        </dependencies>
      </plugin>

]

# Java 8
# JDK 8 
# Apache Maven 3.9.9
% export PATH="$HOME/Downloads/Software/JDK/JDK8/jdk1.8.0_401.jdk//Contents/Home//bin/:$HOME/Downloads/Software/ApacheMaven/apache-maven-3.9.9/bin/":$PATH

% java -version

% mvn --version

% mvn -DarchetypeCatalog=local -DarchetypeGroupId=org.teavm -DarchetypeArtifactId=teavm-maven-webapp -DarchetypeVersion=0.5.1 archetype:generate

# com.commons

# wasmbrowser

# 1.0.0

# com.commons.project

# Y

% cd wasmbrowser

% mvn package

# pom.xml # Edit
[
#
      <!-- Configure WAR plugin to include JavaScript files generated by TeaVM -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <webResources>
            <resource>
              <directory>${project.build.directory}/webapp</directory>
            </resource>
          </webResources>
        </configuration>
      </plugin>
#
            <configuration>
              <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings
                   of the WAR plugin -->
              <targetDirectory>${project.build.directory}/webapp/wasm</targetDirectory>
              <targetFileName>index.wasm</targetFileName>
              <targetType>WEBASSEMBLY</targetType>

              <!-- Main class, containing static void main(String[]) -->
              <mainClass>com.commons.project.Client</mainClass>

              <!-- Optimization level. Valid values are: SIMPLE, ADVANCED, FULL -->
              <optimizationLevel>ADVANCED</optimizationLevel>
            </configuration>
# 
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>

        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <includePluginDependencies>true</includePluginDependencies>
          <mainClass>fi.iki.elonen.SimpleWebServer</mainClass>
           <arguments>
            <argument>-d</argument>
            <argument>${project.build.directory}/${project.build.finalName}</argument>
          </arguments>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.nanohttpd</groupId>
		<artifactId>nanohttpd-webserver</artifactId>
		<version>2.3.1</version>
          </dependency>
        </dependencies>
      </plugin>
]

% cat pom.xml
[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.commons</groupId>
  <artifactId>wasmbrowser</artifactId>
  <version>1.0.0</version>
  <packaging>war</packaging>

  <properties>
    <java.version>1.8</java.version>
    <teavm.version>0.5.1</teavm.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <!-- Emulator of Java class library for TeaVM -->
    <dependency>
      <groupId>org.teavm</groupId>
      <artifactId>teavm-classlib</artifactId>
      <version>${teavm.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- JavaScriptObjects (JSO) - a JavaScript binding for TeaVM -->
    <dependency>
      <groupId>org.teavm</groupId>
      <artifactId>teavm-jso-apis</artifactId>
      <version>${teavm.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Servlet 3.1 specification -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Configure Java compiler to use Java 8 syntax  -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>

      <!-- Configure WAR plugin to include JavaScript files generated by TeaVM -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <webResources>
            <resource>
              <directory>${project.build.directory}/webapp</directory>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <!-- Configure TeaVM -->
      <plugin>
        <groupId>org.teavm</groupId>
        <artifactId>teavm-maven-plugin</artifactId>
        <version>${teavm.version}</version>
        <executions>
          <execution>
            <id>web-client</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings
                   of the WAR plugin -->
              <targetDirectory>${project.build.directory}/webapp/wasm</targetDirectory>
              <targetFileName>index.wasm</targetFileName>
              <targetType>WEBASSEMBLY</targetType>

              <!-- Main class, containing static void main(String[]) -->
              <mainClass>com.commons.project.Client</mainClass>

              <!-- Optimization level. Valid values are: SIMPLE, ADVANCED, FULL -->
              <optimizationLevel>ADVANCED</optimizationLevel>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>

        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <includePluginDependencies>true</includePluginDependencies>
          <mainClass>fi.iki.elonen.SimpleWebServer</mainClass>
           <arguments>
            <argument>-d</argument>
            <argument>${project.build.directory}/${project.build.finalName}</argument>
          </arguments>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.nanohttpd</groupId>
		<artifactId>nanohttpd-webserver</artifactId>
		<version>2.3.1</version>
          </dependency>
        </dependencies>
      </plugin>

    </plugins>
  </build>
</project>
]

% nano src/main/java/com/commons/project/Client.java
[
package com.commons.project;

import org.teavm.interop.*;

public class Client {

    @Export(name = "math")
    public static void math(int x, int y) {
        run(x * y);
    }

    @Import(module = "env", name = "run")
    private static native void run(int number);
}
]
% cat src/main/java/com/commons/project/Client.java

% nano src/main/webapp/index.js
[
let x = 5;
let y = 7;
let result = 0;

function run(number) {
    console.log("WASM called JavaScript run method.");
    result = number;
    console.log(`Math: ${x} x ${y} = ${result}`);
}

WebAssembly.instantiateStreaming (
  fetch('wasm/index.wasm'), {env: {run}})
    .then(module => { 
      console.log("Calling the wasm module from JavaScript.");

      module.instance.exports.math(x, y);

      document.body.innerHTML = `Browser: ${navigator.userAgent} <br\><br\> Math: ${x} x ${y} = ${result}`;
});
]
% cat src/main/webapp/index.js

% nano src/main/webapp/index.html
[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Java WebAssembly</title>
    <script type="module" src="./index.js"></script>
  </head>
  <body></body>
</html>
]
% cat src/main/webapp/index.html

% mkdir -p src/main/resources/META-INF/nanohttpd/

% ls -p src/main/resources/META-INF/nanohttpd/

% nano src/main/resources/META-INF/nanohttpd/mimetypes.properties
[
wasm=application/wasm
]

% cat src/main/resources/META-INF/nanohttpd/mimetypes.properties

[
% ls src/main/webapp
% wget https://www.google.com/favicon.ico --directory-prefix=src/main/webapp
% ls src/main/webapp
]

% mvn clean

% mvn package

# Terminal New Window
% curl http://127.0.0.1:8080
% open http://127.0.0.1:8080

% jar tvf target/wasmbrowser-1.0.0.war

% export JAVA_HOME="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/"

% cd "$HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/bin"

% ./startup.sh

% open http://localhost:8080/

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% cp $HOME/Desktop/GitHub/Auxiliary-Add/WebAssembly/Java/wasmbrowser/target/wasmbrowser-1.0.0.war $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% open http://localhost:8080/wasmbrowser-1.0.0

% ./shutdown.sh

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

% rm -rf $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps/wasmbrowser-1.0.0.war

% ls $HOME/Downloads/Software/ApacheTomcat/apache-tomcat-11.0.1/webapps

cd $HOME

===========================================================================================================================
# HTTP Server
===========================================================================================================================
[
% npm install http-server --global
]
% npm --version
% http-server -p 8000
[
% python3 --version
% python3 -m http.server 8000
]
[
% export PATH="$HOME/Downloads/Software/OpenJDK/JDK23.0.1/jdk-23.0.1.jdk/Contents/Home/bin/":$PATH
% java --version
% jwebserver --port 8000  
]
[
% ruby --version
% gem install webrick
% ruby -run -e httpd . -p 8000
]
[
% php --version 
% php -S 127.0.0.1:8000
]
===========================================================================================================================

===========================================================================================================================
# Terminal New Window
% curl http://127.0.0.1:8000
% open http://127.0.0.1:8000
===========================================================================================================================
***************************************************************************************************************************
###########################################################################################################################


// Credits
/*
https://webassembly.org/
https://wasi.dev/
https://wasmtime.dev/
https://w3.org/
https://developer.mozilla.org/
https://emscripten.org/
https://assemblyscript.org/
https://typescriptlang.org/
https://swift.org/
https://developer.apple.com/
https://swiftwasm.org/
https://go.dev/
https://tinygo.org/
https://developers.google.com/
https://web.dev/
https://rust-lang.org/
https://python.org/
https://pypi.org/
https://pyodide.org/
https://dotnet.microsoft.com/
https://developer.microsoft.com/
https://fsharp.org/
https://foundation.fsharp.org/
https://fsbolero.io/
https://nodejs.org/
https://npmjs.com/
https://ruby-lang.org/
https://rubygems.org/
https://openjdk.org/
https://oracle.com/java/
https://php.net/
https://gcc.gnu.org/
https://maven.apache.org/
https://gradle.org/
https://toml.io/
*/