1.3 Locations

Let's start coding our Express application.

Objectives

1. In our app.js, require the express module and assign it to the express variable.

Answer: var express = require('express');

app.js:
var express = require('express');

2. Using the function assigned to express, create an application instance and assign it to the app variable.

Answer: var app = express();

app.js:
var express = require('express');
var app = express();

3. Using our application instance, app, create a new route that accepts GET requests on the /locations URL path. Remember to pass a callback function which takes a request and response.

Answer: app.get('/locations', function(request, response) {});

app.js:
var express = require('express');
var app = express();
app.get('/locations', function(request, response) {});

4. Respond with an array of city names. The city names should be Caspiana, Indigo and Paradise.

Answer: response.send(["Caspiana", "Indigo", "Paradise"]);

app.js:
var express = require('express');
var app = express();
app.get('/locations', function(request, response) {
	response.send(["Caspiana", "Indigo", "Paradise"]);
});

5. Bind our application to port 3001.

Answer: app.listen(3001);

app.js:
var express = require('express');
var app = express();
app.get('/locations', function(request, response) {
	response.send(["Caspiana", "Indigo", "Paradise"]);
});
app.listen(3001);

6. When our application is ready to receive requests, print the string "Running Express" to the console.

Answer:

app.listen(3001, function(){
	console.log("Running Express");
});

app.js:
var express = require('express');
var app = express();
app.get('/locations', function(request, response) {
	response.send(["Caspiana", "Indigo", "Paradise"]);
});
app.listen(3001, function(){
	console.log("Running Express");
});