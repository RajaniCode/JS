5.7 Express Server

Now, let's create an Express server which queries out for the search term and then returns the JSON.

1. Require the express module.

Answer: var express = require('express');

app.js

var url = require('url');
var request = require('request');
var express = require('express');
var options = {
  protocol: "http:",
  host: "search.twitter.com",
  pathname: '/search.json',
  query: {
    q: "codeschool"
  }
};

var searchURL = url.format(options);
var app; // Create server here


2. Create the Express server and name it app.

Answer: var app = express(); // Create server here

app.js

var url = require('url');
var request = require('request');
var express = require('express');
var options = {
  protocol: "http:",
  host: "search.twitter.com",
  pathname: '/search.json',
  query: {
    q: "codeschool"
  }
};

var searchURL = url.format(options);
var app = express(); // Create server here

3. Create a route for GET requests to / (root path). Remember, the callback function takes two arguments: a request req and a response res.

Answer: app.get('/', function(req, res){});

app.js

var url = require('url');
var request = require('request');
var express = require('express');
var options = {
  protocol: "http:",
  host: "search.twitter.com",
  pathname: '/search.json',
  query: {
    q: "codeschool"
  }
};

var searchURL = url.format(options);
var app = express(); // Create server here
app.get('/', function(req, res){});

4. In our new route, issue a request to searchURL and pipe the results into the response.

Answer: 

app.get('/', function(req, res){
	request(searchURL).pipe(res);
});

app.js

var url = require('url');
var request = require('request');
var express = require('express');
var options = {
  protocol: "http:",
  host: "search.twitter.com",
  pathname: '/search.json',
  query: {
    q: "codeschool"
  }
};

var searchURL = url.format(options);
var app = express(); // Create server here
app.get('/', function(req, res){
	request(searchURL).pipe(res);
});

5. Finally, tell app to listen on port 8080.

Answer: 

app.get('/', function(req, res){
	request(searchURL).pipe(res);
}).listen(8080);

app.js

var url = require('url');
var request = require('request');
var express = require('express');
var options = {
  protocol: "http:",
  host: "search.twitter.com",
  pathname: '/search.json',
  query: {
    q: "codeschool"
  }
};

var searchURL = url.format(options);
var app = express(); // Create server here
app.get('/', function(req, res){
	request(searchURL).pipe(res);
}).listen(8080);

