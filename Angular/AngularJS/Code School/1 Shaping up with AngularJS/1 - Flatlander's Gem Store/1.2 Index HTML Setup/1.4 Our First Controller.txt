1.4 Our First Controller

In order to add some behavior to our application, we need a controller. Add a controller named StoreController to our gemStore application.

app.js

1. Add a controller named StoreController to our gemStore application.

Answer: app.controller('StoreController', function(){});

3. In app.js, we've added a gem object to represent one of the products 
in our gemStore. Assign it to the product property of StoreController 
so we can use them in the page.

Answer: this.product = gem;


index.html

2. Attach the StoreController to the <body> tag. Be sure to alias it as store. 

Answer: <body ng-controller="StoreController as store">


4. Display the name of the product inside the <h3> tag.

Answer: <h3>{{store.product.name}}


5. Display the price of the product inside the <em> tag.

Answer: <em class="pull-right">{{store.product.price}}</em>





app.js

(function(){
  var gem = { name: 'Azurite', price: 2.95 };
  var app = angular.module('gemStore', []);
  app.controller('StoreController', function(){
  	this.product = gem;
  });
})();


index.html

<!DOCTYPE html>
<html ng-app="gemStore">
  <head>
    <link rel="stylesheet" type="text/css" href="bootstrap.min.css" />
    <script type="text/javascript" src="angular.min.js"></script>
    <script type="text/javascript" src="app.js"></script>
  </head>
  <body ng-controller="StoreController as store">
    <div class="product row">
      <h3>{{store.product.name}}
      
        <em class="pull-right">{{store.product.price}}</em>
      </h3>
    </div>
  </body>
</html>