3.11 $resource Refactor

Let's convert our custom Note factory to use Angular resource. Remove all(), find(), and create() methods from our Note service and replace them with the $resource equivalent.

js/services/note.js

angular.module('NoteWrangler')
.factory('Note', ['$http', function NoteFactory($http) {
  
  return {
    all: function() {
      return $http({method: 'GET', url: "/notes"});
    },
    find: function(id) {
      return $http({method:'GET', url: '/notes/' + id});
    },
    create: function(noteObj) {
      return $http({method: 'POST', url: '/notes/', data: noteObj});
    }
  };
}]);

js/app.js

angular.module('NoteWrangler', ['ngRoute'])
.config(function(TweetableProvider) {
  TweetableProvider.setLength(144);
});

index.html

<!DOCTYPE html>
<html lang="en" ng-app="NoteWrangler">

  <head>
    <meta charset="utf-8">
    <title>Note Wrangler</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/application.css" />
  </head>

  <body>
    <div class="nav-wrapper has-dropdown">
      <div class="nav-content">
        <div class="wrapper">
          <div class="nav-content-layout">
            <div class="nav-list">
              <a href="#/notes"
              class="list-item"
              ng-click="selected = 'notes'"
              ng-class="{'active': selected == 'notes'}"> Notes </a>

              <a href="#/users"
              class="list-item"
              ng-click="selected = 'users'"
              ng-class="{'active': selected == 'users'}"> Users </a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="hero-wrapper">
      <div class="hero-content">
        <div class="hero"></div>
      </div>
    </div>

    <div class="main-wrapper">
      <div ng-view></div>
    </div>

    <!-- Load Js libs -->
    <script src="./js/vendor/jquery.js"></script>
    <script src="./js/vendor/angular.js"></script>
    <script src="./js/vendor/angular-route.js"></script>
    

    <!-- NW Scripts -->
    <script src="./js/app.js"></script>
    <script src="./js/routes.js"></script>

    <!-- Controllers -->
    <script src="./js/controllers/notes-create-controller.js"></script>
    <script src="./js/controllers/notes-edit-controller.js"></script>
    <script src="./js/controllers/notes-index-controller.js"></script>
    <script src="./js/controllers/notes-show-controller.js"></script>
    <script src="./js/controllers/users-index-controller.js"></script>
    <script src="./js/controllers/users-show-controller.js"></script>

    <!-- Directives -->
    <script src="./js/directives/nw-card.js"></script>

    <!-- Services -->
    <script src="./js/services/note.js"></script>
    <script src="./js/services/tweetable.js"></script>

  </body>
</html>

1. Include angular-resource.js in index.html so that we can use it in our app. It is located in the same directory as our angular.js file.

Answer: <script src="./js/vendor/angular-resource.js"></script>

index.html

<!DOCTYPE html>
<html lang="en" ng-app="NoteWrangler">

  <head>
    <meta charset="utf-8">
    <title>Note Wrangler</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/application.css" />
  </head>

  <body>
    <div class="nav-wrapper has-dropdown">
      <div class="nav-content">
        <div class="wrapper">
          <div class="nav-content-layout">
            <div class="nav-list">
              <a href="#/notes"
              class="list-item"
              ng-click="selected = 'notes'"
              ng-class="{'active': selected == 'notes'}"> Notes </a>

              <a href="#/users"
              class="list-item"
              ng-click="selected = 'users'"
              ng-class="{'active': selected == 'users'}"> Users </a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="hero-wrapper">
      <div class="hero-content">
        <div class="hero"></div>
      </div>
    </div>

    <div class="main-wrapper">
      <div ng-view></div>
    </div>

    <!-- Load Js libs -->
    <script src="./js/vendor/jquery.js"></script>
    <script src="./js/vendor/angular.js"></script>
    <script src="./js/vendor/angular-route.js"></script>
    <script src="./js/vendor/angular-resource.js"></script>

    <!-- NW Scripts -->
    <script src="./js/app.js"></script>
    <script src="./js/routes.js"></script>

    <!-- Controllers -->
    <script src="./js/controllers/notes-create-controller.js"></script>
    <script src="./js/controllers/notes-edit-controller.js"></script>
    <script src="./js/controllers/notes-index-controller.js"></script>
    <script src="./js/controllers/notes-show-controller.js"></script>
    <script src="./js/controllers/users-index-controller.js"></script>
    <script src="./js/controllers/users-show-controller.js"></script>

    <!-- Directives -->
    <script src="./js/directives/nw-card.js"></script>

    <!-- Services -->
    <script src="./js/services/note.js"></script>
    <script src="./js/services/tweetable.js"></script>

  </body>
</html>

2. Include ngResource in the NoteWrangler module.

Answer: angular.module('NoteWrangler', ['ngRoute', 'ngResource'])

js/app.js

angular.module('NoteWrangler', ['ngRoute', 'ngResource'])
.config(function(TweetableProvider) {
  TweetableProvider.setLength(144);
});

3. Replace the existing object that is returned from the Note factory with an Angular resource that uses '/notes' as the data source.

Answer: return $resource("/notes", {}, {});  

js/services/note.js

angular.module('NoteWrangler')
.factory('Note', function NoteFactory($resource) {
  return $resource("/notes", {}, {});  
});
