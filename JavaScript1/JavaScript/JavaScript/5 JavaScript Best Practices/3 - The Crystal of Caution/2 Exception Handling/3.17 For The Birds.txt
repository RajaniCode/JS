3.17 For The Birds

Food is for the birds, why not share what is in your pack?

dhuun.js

// dhuun's pack o' goods
var pack = {
  foodPouch: ["carrot", "mystery meat", "apple", 42],
  addFood: function(foodItem) {
    this.foodPouch = this.foodPouch || [];
    this.foodPouch.push(foodItem);
  },
  feedBird: function(bird) {
    var food      = bird.birdFood,
        foodIndex = this.foodPouch.indexOf(food);
    
    // If the exact food we want is not in the array,
    // check if the type of food is there.
    if (foodIndex === -1) {
      throw new ReferenceError("Bird food given is not available.");      
    }
    
    bird.fed = true;
  }
};

//Parent Bird Class
function Bird() {}

// SyntaxBird Inherits From Parent Bird
function SyntaxBird() {}
SyntaxBird.prototype   = Object.create(Bird.prototype);
var LoopLover          = function(birdFood){
  this.birdFood = birdFood;
  this.fed = false;
};
LoopLover.prototype    = Object.create(SyntaxBird.prototype);

// DatatypeBird Inherits From Parent Bird
function DatatypeBird() {}
DatatypeBird.prototype = Object.create(Bird.prototype);
var NumberNommer       = function(birdFood){this.birdFood = birdFood;};
NumberNommer.prototype = Object.create(DatatypeBird.prototype);


// bird variables below inherit from above prototype chain
var numba = new NumberNommer("42");
var loopy = new LoopLover("loops");
var tryCatcher = new LoopLover("la-de");

// array of all the inhabitants
var duneInhabitants = [numba, loopy, tryCatcher];


// loop through duneInhabitants and if Bird call feedBird()
for (var i = 0; i < duneInhabitants.length; i++) {
  
}

1. In the loop at the bottom, feed each duneInhabitant with the function found in your pack Object.

2. Wrap your call to feed each bird in a try/catch setup to continue feeding birds if there is an error.

3. When an error occurs log out the message "<bird> was not fed." to the console, where <bird> is the Bird Object that was passed to feedBird.

Answer: 

  try
  {
    var duneInhabitantsBird = duneInhabitants[i];
    if (duneInhabitantsBird instanceof Bird)
    {
      pack.feedBird(duneInhabitantsBird);
    }
  }
  catch(e)
  {
    console.log(duneInhabitantsBird + ' was not fed.');
  }

dhuun.js

// dhuun's pack o' goods
var pack = {
  foodPouch: ["carrot", "mystery meat", "apple", 42],
  addFood: function(foodItem) {
    this.foodPouch = this.foodPouch || [];
    this.foodPouch.push(foodItem);
  },
  feedBird: function(bird) {
    var food      = bird.birdFood,
        foodIndex = this.foodPouch.indexOf(food);
    
    // If the exact food we want is not in the array,
    // check if the type of food is there.
    if (foodIndex === -1) {
      throw new ReferenceError("Bird food given is not available.");      
    }
    
    bird.fed = true;
  }
};

//Parent Bird Class
function Bird() {}

// SyntaxBird Inherits From Parent Bird
function SyntaxBird() {}
SyntaxBird.prototype   = Object.create(Bird.prototype);
var LoopLover          = function(birdFood){
  this.birdFood = birdFood;
  this.fed = false;
};
LoopLover.prototype    = Object.create(SyntaxBird.prototype);

// DatatypeBird Inherits From Parent Bird
function DatatypeBird() {}
DatatypeBird.prototype = Object.create(Bird.prototype);
var NumberNommer       = function(birdFood){this.birdFood = birdFood;};
NumberNommer.prototype = Object.create(DatatypeBird.prototype);


// bird variables below inherit from above prototype chain
var numba = new NumberNommer("42");
var loopy = new LoopLover("loops");
var tryCatcher = new LoopLover("la-de");

// array of all the inhabitants
var duneInhabitants = [numba, loopy, tryCatcher];


// loop through duneInhabitants and if Bird call feedBird()
for (var i = 0; i < duneInhabitants.length; i++) {
  try
  {
    var duneInhabitantsBird = duneInhabitants[i];
    if (duneInhabitantsBird instanceof Bird)
    {
      pack.feedBird(duneInhabitantsBird);
    }
  }
  catch(e)
  {
    console.log(duneInhabitantsBird + ' was not fed.');
  }
}
