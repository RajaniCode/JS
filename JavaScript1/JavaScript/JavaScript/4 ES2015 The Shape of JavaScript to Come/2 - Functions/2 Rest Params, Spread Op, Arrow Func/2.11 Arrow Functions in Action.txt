2.11 Arrow Functions in Action


We've wrapped our previous functionality into a higher level component, but it's not yet fully functional. There's a scope bug we must fix before we can use our new component.

active-users-component.js

function ActiveUsersComponent(target, topicId){
  this.targetElement = target;
  this.topicId       = topicId;
}

ActiveUsersComponent.prototype.render = function(){
  getActiveUsers(this.topicId, function(data){
    let userNameDivs = appendUserNames(...data.userNames);
    appendToSidebar(this.targetElement, userNameDivs);
  });
};
// Create new component below


1. Fix the scope issue for this.targetElement by changing the callback argument passed to getActiveUsers() to an arrow function instead of a regular function.

Answer:

active-users-component.js

function ActiveUsersComponent(target, topicId){
  this.targetElement = target;
  this.topicId       = topicId;
}

ActiveUsersComponent.prototype.render = function(){
  getActiveUsers(this.topicId, (data) => {
    let userNameDivs = appendUserNames(...data.userNames);
    appendToSidebar(this.targetElement, userNameDivs);
  });
};
// Create new component below

2. Create a new instance of ActiveUsersComponent using the new keyword and assign it to a variable called component. Let's use the following values for the arguments: ".active-users" and 17. Remember to use the let keyword to declare the new variable.

Answer:

active-users-component.js

function ActiveUsersComponent(target, topicId){
  this.targetElement = target;
  this.topicId       = topicId;
}

ActiveUsersComponent.prototype.render = function(){
  getActiveUsers(this.topicId, (data) => {
    let userNameDivs = appendUserNames(...data.userNames);
    appendToSidebar(this.targetElement, userNameDivs);
  });
};
// Create new component below
let component = new ActiveUsersComponent(".active-users", 17);

3. Now, let's call the render() method on the new instance of ActiveUsersComponent we created.

Answer:

active-users-component.js

function ActiveUsersComponent(target, topicId){
  this.targetElement = target;
  this.topicId       = topicId;
}

ActiveUsersComponent.prototype.render = function(){
  getActiveUsers(this.topicId, (data) => {
    let userNameDivs = appendUserNames(...data.userNames);
    appendToSidebar(this.targetElement, userNameDivs);
  });
};
// Create new component below
let component = new ActiveUsersComponent(".active-users", 17);
component.render();